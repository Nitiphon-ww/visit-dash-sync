import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Stethoscope, Clock, Users, LogOut, Activity } from 'lucide-react';

interface Doctor {
  id: string;
  specialization: string;
  average_consultation_minutes: number;
  profiles: {
    full_name: string;
  };
}

interface QueueBooking {
  id: string;
  queue_number: number;
  status: string;
  doctor_id: string;
  doctors: {
    specialization: string;
    average_consultation_minutes: number;
    profiles: {
      full_name: string;
    };
  };
}

const PatientDashboard = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [doctors, setDoctors] = useState<Doctor[]>([]);
  const [myQueue, setMyQueue] = useState<QueueBooking | null>(null);
  const [patientsAhead, setPatientsAhead] = useState(0);
  const [loading, setLoading] = useState(true);
  const [userId, setUserId] = useState<string>('');

  useEffect(() => {
    let redirected = false;
    
    const initDashboard = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user && !redirected) {
        redirected = true;
        navigate('/auth');
        return;
      }
      if (!user) return;
      
      setUserId(user.id);
      await fetchDoctors();
      await fetchMyQueue(user.id);
      setLoading(false);
    };
    initDashboard();

    // Real-time subscription for queue updates
    const channel = supabase
      .channel('queue-updates')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'queue_bookings'
        },
        async () => {
          const { data: { user } } = await supabase.auth.getUser();
          if (user) await fetchMyQueue(user.id);
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, []);

  const fetchDoctors = async () => {
    const { data, error } = await supabase
      .from('doctors')
      .select('*, profiles(full_name)')
      .eq('is_available', true);

    if (!error && data) {
      setDoctors(data);
    }
  };

  const fetchMyQueue = async (patientId: string) => {
    const { data, error } = await supabase
      .from('queue_bookings')
      .select('*, doctors(specialization, average_consultation_minutes, profiles(full_name))')
      .eq('patient_id', patientId)
      .in('status', ['waiting', 'called'])
      .order('created_at', { ascending: false })
      .limit(1)
      .maybeSingle();

    if (!error && data) {
      setMyQueue(data);
      // Calculate patients ahead
      const { count } = await supabase
        .from('queue_bookings')
        .select('*', { count: 'exact', head: true })
        .eq('doctor_id', data.doctor_id)
        .eq('status', 'waiting')
        .lt('queue_number', data.queue_number);
      setPatientsAhead(count || 0);
    } else {
      setMyQueue(null);
      setPatientsAhead(0);
    }
  };

  const bookQueue = async (doctorId: string) => {
    try {
      const { error } = await supabase
        .from('queue_bookings')
        .insert([{
          patient_id: userId,
          doctor_id: doctorId,
          queue_number: 0 // Will be auto-generated by trigger
        }]);

      if (error) throw error;

      toast({
        title: 'Queue booked!',
        description: 'You have been added to the queue'
      });

      await fetchMyQueue(userId);
    } catch (error: any) {
      toast({
        title: 'Error',
        description: error.message,
        variant: 'destructive'
      });
    }
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    navigate('/auth');
  };

  const calculateWaitTime = () => {
    if (!myQueue) return 0;
    return patientsAhead * (myQueue.doctors.average_consultation_minutes || 15);
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Activity className="w-8 h-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-accent/5">
      <header className="border-b bg-card/50 backdrop-blur-sm sticky top-0 z-10 shadow-[var(--shadow-card)]">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <Stethoscope className="w-6 h-6 text-primary" />
            <h1 className="text-xl font-bold">MediQueue</h1>
          </div>
          <Button variant="outline" onClick={handleLogout} size="sm">
            <LogOut className="w-4 h-4 mr-2" />
            Logout
          </Button>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        {myQueue && (
          <Card className="mb-8 border-primary/20 shadow-[var(--shadow-medical)] animate-fade-in">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Activity className={myQueue.status === 'called' ? 'animate-pulse text-accent' : 'text-primary'} />
                Your Queue Status
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center p-4 bg-primary/10 rounded-lg">
                  <p className="text-sm text-muted-foreground mb-1">Queue Number</p>
                  <p className="text-3xl font-bold text-primary">{myQueue.queue_number}</p>
                </div>
                <div className="text-center p-4 bg-accent/10 rounded-lg">
                  <p className="text-sm text-muted-foreground mb-1">Patients Ahead</p>
                  <p className="text-3xl font-bold text-accent">{patientsAhead}</p>
                </div>
                <div className="text-center p-4 bg-secondary/10 rounded-lg">
                  <p className="text-sm text-muted-foreground mb-1">Est. Wait Time</p>
                  <p className="text-3xl font-bold text-secondary">{calculateWaitTime()} min</p>
                </div>
              </div>
              <div className="flex items-center justify-between pt-4 border-t">
                <div>
                  <p className="font-medium">{myQueue.doctors.profiles?.full_name || 'Doctor'}</p>
                  <p className="text-sm text-muted-foreground">{myQueue.doctors.specialization}</p>
                </div>
                <Badge variant={myQueue.status === 'called' ? 'default' : 'secondary'} className="animate-pulse">
                  {myQueue.status === 'called' ? 'YOUR TURN!' : 'Waiting'}
                </Badge>
              </div>
            </CardContent>
          </Card>
        )}

        <Card>
          <CardHeader>
            <CardTitle>Available Doctors</CardTitle>
            <CardDescription>Choose a doctor to book your queue</CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {doctors.map((doctor) => (
              <Card key={doctor.id} className="hover:shadow-[var(--shadow-medical)] transition-all">
                <CardContent className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="font-semibold text-lg">{doctor.profiles?.full_name || 'Doctor'}</h3>
                      <p className="text-sm text-muted-foreground">{doctor.specialization}</p>
                    </div>
                    <Stethoscope className="w-8 h-8 text-primary" />
                  </div>
                  <div className="flex items-center gap-2 text-sm text-muted-foreground mb-4">
                    <Clock className="w-4 h-4" />
                    <span>~{doctor.average_consultation_minutes} min per patient</span>
                  </div>
                  <Button
                    onClick={() => bookQueue(doctor.id)}
                    disabled={!!myQueue}
                    className="w-full"
                  >
                    {myQueue ? 'Already in Queue' : 'Book Queue'}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </CardContent>
        </Card>
      </main>
    </div>
  );
};

export default PatientDashboard;
